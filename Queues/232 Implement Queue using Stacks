/**Problem Brief:

You are asked to implement a queue (FIFO: First In First Out) using only two stacks (LIFO: Last In First Out). **/


import java.util.Stack;

class MyQueue {
    Stack<Integer> s1; // Main stack (front at top)
    Stack<Integer> s2; // Helper stack

    // Constructor
    public MyQueue() {
        s1 = new Stack<>();
        s2 = new Stack<>();
    }
    
    // Push element x to the back of queue
    public void push(int x) {
        // Move all elements from s1 to s2
        while (!s1.isEmpty()) {
            s2.push(s1.pop());
        }

        // Push the new element onto s1
        s1.push(x);

        // Move elements back from s2 to s1
        while (!s2.isEmpty()) {
            s1.push(s2.pop());
        }
    }
    
    // Removes the element from in front of queue
    public int pop() {
        return s1.pop();
    }
    
    // Get the front element
    public int peek() {
        return s1.peek();
    }
    
    // Returns whether the queue is empty
    public boolean empty() {
        return s1.isEmpty();
    }
}

/**
 * Example usage:
 * MyQueue obj = new MyQueue();
 * obj.push(10);
 * obj.push(20);
 * int first = obj.pop();   // 10
 * int second = obj.peek(); // 20
 * boolean isEmpty = obj.empty(); // false
 */

